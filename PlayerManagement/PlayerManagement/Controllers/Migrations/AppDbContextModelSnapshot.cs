// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayerManagement.Data;

#nullable disable

namespace PlayerManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlayerManagement.Models.BloodGroup", b =>
                {
                    b.Property<int>("BloodGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodGroupId"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("BloodGroupId")
                        .HasName("PK__BloodGro__4398C68FDE0DDF3E");

                    b.ToTable("BloodGroup", (string)null);

                    b.HasData(
                        new
                        {
                            BloodGroupId = 1,
                            GroupName = "A+"
                        },
                        new
                        {
                            BloodGroupId = 2,
                            GroupName = "A-"
                        },
                        new
                        {
                            BloodGroupId = 3,
                            GroupName = "B+"
                        },
                        new
                        {
                            BloodGroupId = 4,
                            GroupName = "B-"
                        });
                });

            modelBuilder.Entity("PlayerManagement.Models.EvaluationCategory", b =>
                {
                    b.Property<int>("EvaluationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EvaluationCategoryId")
                        .HasName("PK__Evaluati__964127FDD9F71159");

                    b.ToTable("EvaluationCategory", (string)null);
                });

            modelBuilder.Entity("PlayerManagement.Models.EvaluationType", b =>
                {
                    b.Property<int>("EvaluationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("EvaluationTypeId")
                        .HasName("PK__Evaluati__AE65CEC7163FDF53");

                    b.ToTable("EvaluationType", (string)null);
                });

            modelBuilder.Entity("PlayerManagement.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("GenderId")
                        .HasName("PK__Gender__4E24E9F788C32ACD");

                    b.ToTable("Gender", (string)null);

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderName = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            GenderName = "Other"
                        });
                });

            modelBuilder.Entity("PlayerManagement.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("PlayerManagement.Models.ManagerTrainerAssignment", b =>
                {
                    b.Property<int>("ManagerTrainerAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerTrainerAssignmentId"));

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("ManagerTrainerAssignmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("ManagerTrainerAssignments");
                });

            modelBuilder.Entity("PlayerManagement.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchFormatId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchId");

                    b.HasIndex("MatchFormatId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("PlayerManagement.Models.MatchFormat", b =>
                {
                    b.Property<int>("MatchFormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchFormatId"));

                    b.Property<string>("FormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchFormatId");

                    b.ToTable("MatchFormats");

                    b.HasData(
                        new
                        {
                            MatchFormatId = 1,
                            FormatName = "T20"
                        },
                        new
                        {
                            MatchFormatId = 2,
                            FormatName = "ODI"
                        },
                        new
                        {
                            MatchFormatId = 3,
                            FormatName = "Test"
                        });
                });

            modelBuilder.Entity("PlayerManagement.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FathersName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastEducationalQualification")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("MothersName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NidNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PlayerWeight")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int>("SportsTypeId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId")
                        .HasName("PK__Player__4A4E74C8446FF317");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SportsTypeId");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerEvaluation", b =>
                {
                    b.Property<int>("PlayerEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerEvaluationId"));

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("PlayerEvaluationId")
                        .HasName("PK__PlayerEv__C805209CBCD00737");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("PlayerEvaluation", (string)null);
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerEvaluationDetail", b =>
                {
                    b.Property<int>("PlayerEvaluationDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerEvaluationDetailsId"));

                    b.Property<int?>("BallNumber")
                        .HasColumnType("int");

                    b.Property<int?>("BallsBowled")
                        .HasColumnType("int");

                    b.Property<int?>("BallsFaced")
                        .HasColumnType("int");

                    b.Property<int?>("Boundaries")
                        .HasColumnType("int");

                    b.Property<int?>("CatchesTaken")
                        .HasColumnType("int");

                    b.Property<string>("DismissalType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EvaluationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBoundary")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOut")
                        .HasColumnType("bit");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<int?>("Misfields")
                        .HasColumnType("int");

                    b.Property<int?>("NoBalls")
                        .HasColumnType("int");

                    b.Property<int>("OverNumber")
                        .HasColumnType("int");

                    b.Property<int>("PlayerEvaluationId")
                        .HasColumnType("int");

                    b.Property<int?>("RunOuts")
                        .HasColumnType("int");

                    b.Property<int?>("RunsConceded")
                        .HasColumnType("int");

                    b.Property<int?>("RunsScored")
                        .HasColumnType("int");

                    b.Property<int?>("Stumpings")
                        .HasColumnType("int");

                    b.Property<int?>("WicketsTaken")
                        .HasColumnType("int");

                    b.Property<int?>("Wides")
                        .HasColumnType("int");

                    b.HasKey("PlayerEvaluationDetailsId")
                        .HasName("PK__PlayerEv__AE490EFB6DDD0AF6");

                    b.HasIndex("EvaluationCategoryId");

                    b.HasIndex("EvaluationTypeId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerEvaluationId");

                    b.ToTable("PlayerEvaluationDetails");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerTrainingAssignment", b =>
                {
                    b.Property<int>("PlayerTrainingAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerTrainingAssignmentId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TrainingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PlayerTrainingAssignmentId")
                        .HasName("PK__PlayerTr__055FA1881DFFF5DE");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrainingId");

                    b.ToTable("PlayerTrainingAssignment", (string)null);
                });

            modelBuilder.Entity("PlayerManagement.Models.Religion", b =>
                {
                    b.Property<int>("ReligionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReligionId"));

                    b.Property<string>("ReligionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ReligionId")
                        .HasName("PK__Religion__D3ADAB6A825E3C0E");

                    b.ToTable("Religion", (string)null);

                    b.HasData(
                        new
                        {
                            ReligionId = 1,
                            ReligionName = "Islam"
                        },
                        new
                        {
                            ReligionId = 2,
                            ReligionName = "Hinduism"
                        },
                        new
                        {
                            ReligionId = 3,
                            ReligionName = "Christianism"
                        },
                        new
                        {
                            ReligionId = 4,
                            ReligionName = "Buddism"
                        });
                });

            modelBuilder.Entity("PlayerManagement.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            SkillName = "Batting"
                        },
                        new
                        {
                            SkillId = 2,
                            SkillName = "Bowling"
                        },
                        new
                        {
                            SkillId = 3,
                            SkillName = "Fielding"
                        });
                });

            modelBuilder.Entity("PlayerManagement.Models.SportsType", b =>
                {
                    b.Property<int>("SportsTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportsTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("SportsTypeId")
                        .HasName("PK__SportsTy__8F679832FD582307");

                    b.ToTable("SportsType", (string)null);

                    b.HasData(
                        new
                        {
                            SportsTypeId = 1,
                            TypeName = "Cricket"
                        },
                        new
                        {
                            SportsTypeId = 2,
                            TypeName = "Football"
                        },
                        new
                        {
                            SportsTypeId = 3,
                            TypeName = "Badminton"
                        },
                        new
                        {
                            SportsTypeId = 4,
                            TypeName = "Swimming"
                        });
                });

            modelBuilder.Entity("PlayerManagement.Models.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsExperienced")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("PlayerManagement.Models.TrainerSkill", b =>
                {
                    b.Property<int>("TrainerSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerSkillId"));

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("TrainerSkillId");

                    b.HasIndex("SkillId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSkills");
                });

            modelBuilder.Entity("PlayerManagement.Models.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"));

                    b.Property<string>("TrainingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TrainingId")
                        .HasName("PK__Training__E8D71D828C6BE2AD");

                    b.ToTable("Training");

                    b.HasData(
                        new
                        {
                            TrainingId = 1,
                            TrainingName = "Batting"
                        },
                        new
                        {
                            TrainingId = 2,
                            TrainingName = "Bowling"
                        },
                        new
                        {
                            TrainingId = 3,
                            TrainingName = "Fielding"
                        },
                        new
                        {
                            TrainingId = 4,
                            TrainingName = "Tactical"
                        },
                        new
                        {
                            TrainingId = 5,
                            TrainingName = "Strength"
                        });
                });

            modelBuilder.Entity("PlayerManagement.Models.ManagerTrainerAssignment", b =>
                {
                    b.HasOne("PlayerManagement.Models.Manager", "Manager")
                        .WithMany("ManagerTrainerAssignments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_managerTrainerAssignments_Managers_ManagerId");

                    b.HasOne("PlayerManagement.Models.Trainer", "Trainer")
                        .WithMany("ManagerTrainerAssignments")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_managerTrainerAssignments_Trainers_TrainerId");

                    b.Navigation("Manager");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("PlayerManagement.Models.Match", b =>
                {
                    b.HasOne("PlayerManagement.Models.MatchFormat", "MatchFormat")
                        .WithMany("Matches")
                        .HasForeignKey("MatchFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchFormat");
                });

            modelBuilder.Entity("PlayerManagement.Models.Player", b =>
                {
                    b.HasOne("PlayerManagement.Models.BloodGroup", "BloodGroup")
                        .WithMany("Players")
                        .HasForeignKey("BloodGroupId")
                        .IsRequired()
                        .HasConstraintName("FK__Player__BloodGro__300424B4");

                    b.HasOne("PlayerManagement.Models.Gender", "Gender")
                        .WithMany("Players")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK__Player__GenderId__2E1BDC42");

                    b.HasOne("PlayerManagement.Models.Religion", "Religion")
                        .WithMany("Players")
                        .HasForeignKey("ReligionId")
                        .IsRequired()
                        .HasConstraintName("FK__Player__Religion__30F848ED");

                    b.HasOne("PlayerManagement.Models.SportsType", "SportsType")
                        .WithMany("Players")
                        .HasForeignKey("SportsTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Player__SportsTy__2F10007B");

                    b.Navigation("BloodGroup");

                    b.Navigation("Gender");

                    b.Navigation("Religion");

                    b.Navigation("SportsType");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerEvaluation", b =>
                {
                    b.HasOne("PlayerManagement.Models.Player", "Player")
                        .WithMany("PlayerEvaluations")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK__PlayerEva__Playe__5EBF139D");

                    b.HasOne("PlayerManagement.Models.Trainer", "Trainer")
                        .WithMany("PlayerEvaluations")
                        .HasForeignKey("TrainerId")
                        .IsRequired()
                        .HasConstraintName("FK__PlayerEva__Train__5FB337D6");

                    b.Navigation("Player");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerEvaluationDetail", b =>
                {
                    b.HasOne("PlayerManagement.Models.EvaluationCategory", "EvaluationCategory")
                        .WithMany("PlayerEvaluationDetails")
                        .HasForeignKey("EvaluationCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__PlayerEva__Evalu__6754599E");

                    b.HasOne("PlayerManagement.Models.EvaluationType", "EvaluationType")
                        .WithMany("PlayerEvaluationDetails")
                        .HasForeignKey("EvaluationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__PlayerEva__Evalu__656C112C");

                    b.HasOne("PlayerManagement.Models.Match", "Match")
                        .WithMany("PlayerEvaluationDetails")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK__PlayerEva__Match__66603565");

                    b.HasOne("PlayerManagement.Models.PlayerEvaluation", "PlayerEvaluation")
                        .WithMany("PlayerEvaluationDetails")
                        .HasForeignKey("PlayerEvaluationId")
                        .IsRequired()
                        .HasConstraintName("FK__PlayerEva__Playe__6477ECF3");

                    b.Navigation("EvaluationCategory");

                    b.Navigation("EvaluationType");

                    b.Navigation("Match");

                    b.Navigation("PlayerEvaluation");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerTrainingAssignment", b =>
                {
                    b.HasOne("PlayerManagement.Models.Player", "Player")
                        .WithMany("PlayerTrainingAssignments")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK__PlayerTra__Playe__34C8D9D1");

                    b.HasOne("PlayerManagement.Models.Training", "Training")
                        .WithMany("PlayerTrainingAssignments")
                        .HasForeignKey("TrainingId")
                        .IsRequired()
                        .HasConstraintName("FK__PlayerTra__Train__35BCFE0A");

                    b.Navigation("Player");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("PlayerManagement.Models.TrainerSkill", b =>
                {
                    b.HasOne("PlayerManagement.Models.Skill", "Skill")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerManagement.Models.Trainer", "Trainer")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("PlayerManagement.Models.BloodGroup", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("PlayerManagement.Models.EvaluationCategory", b =>
                {
                    b.Navigation("PlayerEvaluationDetails");
                });

            modelBuilder.Entity("PlayerManagement.Models.EvaluationType", b =>
                {
                    b.Navigation("PlayerEvaluationDetails");
                });

            modelBuilder.Entity("PlayerManagement.Models.Gender", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("PlayerManagement.Models.Manager", b =>
                {
                    b.Navigation("ManagerTrainerAssignments");
                });

            modelBuilder.Entity("PlayerManagement.Models.Match", b =>
                {
                    b.Navigation("PlayerEvaluationDetails");
                });

            modelBuilder.Entity("PlayerManagement.Models.MatchFormat", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("PlayerManagement.Models.Player", b =>
                {
                    b.Navigation("PlayerEvaluations");

                    b.Navigation("PlayerTrainingAssignments");
                });

            modelBuilder.Entity("PlayerManagement.Models.PlayerEvaluation", b =>
                {
                    b.Navigation("PlayerEvaluationDetails");
                });

            modelBuilder.Entity("PlayerManagement.Models.Religion", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("PlayerManagement.Models.Skill", b =>
                {
                    b.Navigation("TrainerSkills");
                });

            modelBuilder.Entity("PlayerManagement.Models.SportsType", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("PlayerManagement.Models.Trainer", b =>
                {
                    b.Navigation("ManagerTrainerAssignments");

                    b.Navigation("PlayerEvaluations");

                    b.Navigation("TrainerSkills");
                });

            modelBuilder.Entity("PlayerManagement.Models.Training", b =>
                {
                    b.Navigation("PlayerTrainingAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
